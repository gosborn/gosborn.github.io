<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron, | Greg Osborn]]></title>
  <link href="http://gosborn.github.io/blog/categories/flatiron/atom.xml" rel="self"/>
  <link href="http://gosborn.github.io/"/>
  <updated>2015-07-01T22:39:28-04:00</updated>
  <id>http://gosborn.github.io/</id>
  <author>
    <name><![CDATA[Greg Osborn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Start using Pry!]]></title>
    <link href="http://gosborn.github.io/blog/2015/07/01/start-using-pry/"/>
    <updated>2015-07-01T19:40:56-04:00</updated>
    <id>http://gosborn.github.io/blog/2015/07/01/start-using-pry</id>
    <content type="html"><![CDATA[<h2>Tips for using Pry</h2>

<p><img src="https://camo.githubusercontent.com/c26ae0f28a595b15dc4d135fdcc113366f811853/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f32363532313837352f70727925323073747566662f6c6f676f2f7072795f6c6f676f5f3335302e706e67" alt="pry_image" /></p>

<p>In the past, I&rsquo;ve used REPLs like IRB or <a href="http://repl.it">repl.it</a> to play around with Ruby. Pry adds on tons of functionality and has been my go-to REPL ever since diving into the documentation (on a pretty shallow level, I&rsquo;ll admit). It takes a little bit of getting used to, but just liking learning a manual transmission, it&rsquo;s tough to go back once you get the hang of it.</p>

<p>Below, I&rsquo;ll describe some of my favorite features and some resources for further reading.</p>

<h2>Pry Features</h2>

<p>Pry adds in many features to the REPL environment.</p>

<ul>
<li>You can set <strong>breakpoints</strong> in code with runtime invocation.

<ul>
<li>I won&rsquo;t discuss this as most people are introduced to Pry via this utility to debug code.</li>
</ul>
</li>
<li>You can get <strong>help</strong> on the fly

<ul>
<li><strong>Pry-docs</strong> and source code browsing will eliminate some trips to Google and the Ruby documentation: docs are provided in Pry</li>
<li>Tools are provided to <strong>trace errors</strong></li>
</ul>
</li>
<li>You can easily travel around your code

<ul>
<li>Pry provides tools (not unlike your BASH console) that allow you to <strong>travel in and out of environments</strong> to view local variables and methods</li>
<li>Pry also provides tools that <strong>interact with BASH</strong></li>
<li>Pry also allows you to <strong>travel through time</strong> by replaying your history</li>
</ul>
</li>
<li>Many <strong>plugins</strong> interact with Pry, allowing additional functionality</li>
</ul>


<h3>Moving in and out of environments, in Ruby and BASH</h3>

<p>In pry, cd and ls act in a way similar to the cd and ls commands in BASH. cd allows you to change environments. Below, I used cd to move into the environment of my array. The console tells us this by changing the prompt to include #<Array>.</p>

<pre><code>// â™¥ pry
[1] pry(main)&gt; arr = Array.new
=&gt; []
[2] pry(main)&gt; cd arr
[3] pry(#&lt;Array&gt;):1&gt; 
</code></pre>

<p>Now that I&rsquo;m in an array, I can use ls to see what is available to me.</p>

<pre><code>4] pry(#&lt;Array&gt;):1&gt; ls
Enumerable#methods: 
  all?            each_slice        flat_map  max_by     none?         slice_when
  chunk           each_with_index   grep      member?    one?          sort_by   
  collect_concat  each_with_object  group_by  min        partition   
  detect          entries           inject    min_by     reduce      
  each_cons       find              lazy      minmax     slice_after 
  each_entry      find_all          max       minmax_by  slice_before
Columnize#methods: columnize  columnize_opts  columnize_opts=
Array#methods: 
  &amp;         combination  fill        map!                  reverse!      sort!     
  *         compact      find_index  pack                  reverse_each  sort_by!  
  +         compact!     first       permutation           rindex        take      
  -         concat       flatten     place                 rotate        take_while
  &lt;&lt;        count        flatten!    pop                   rotate!       to_a      
  &lt;=&gt;       cycle        frozen?     pretty_print          sample        to_ary    
  ==        delete       hash        pretty_print_cycle    select        to_h      
  []        delete_at    include?    product               select!       to_s      
  []=       delete_if    index       push                  shelljoin     transpose 
  any?      drop         insert      rassoc                shift         uniq      
  assoc     drop_while   inspect     reject                shuffle       uniq!     
  at        each         join        reject!               shuffle!      unshift   
  bsearch   each_index   keep_if     repeated_combination  size          values_at 
  clear     empty?       last        repeated_permutation  slice         zip       
  collect   eql?         length      replace               slice!        |         
  collect!  fetch        map         reverse               sort        
self.methods: __pry__
locals: _  __  _dir_  _ex_  _file_  _in_  _out_  _pry_
</code></pre>

<p>ls will show you which methods, constants and variables are accessible to that environment. Use:</p>

<ul>
<li>ls -m; for local methods</li>
<li>ls -l; for local variables</li>
<li>ls -c; for constants</li>
<li>ls -G to search for paramters by name (or partial name)</li>
</ul>


<p>With Pry-docs installed (gem install pry-docs), you can get info on how any method is used. While still in the array environment:</p>

<pre><code>[13] pry(#&lt;Array&gt;):1&gt; ? self.map

From: array.c (C Method):
Owner: Array
Visibility: public
Signature: map()
Number of lines: 12

Invokes the given block once for each element of self.

Creates a new array containing the values returned by the block.

See also Enumerable#collect.

If no block is given, an Enumerator is returned instead.

   a = [ "a", "b", "c", "d" ]
   a.collect { |x| x + "!" }        #=&gt; ["a!", "b!", "c!", "d!"]
   a.map.with_index{ |x, i| x * i } #=&gt; ["", "b", "cc", "ddd"]
   a                                #=&gt; ["a", "b", "c", "d"]
</code></pre>

<p>Using ? (show-doc is an alias) and .map (using self, an array in this case, as the receiver) returns the Ruby Documentation in the console! No more searching through Google.</p>

<p>Just like in BASH, cd .. goes up an environment, towards main.</p>

<h3>Examples with a method</h3>

<p>Below, I&rsquo;ve created a Dog class, which will return &ldquo;wooooof&rdquo; when bark is called on an instance of the class.</p>

<p>show-source allows the user to look back on the code contained within Dog, very helpful while debugging a larger file, especially while using binding.pry.</p>

<p>Also, observe how one can cd into and instance of the Dog classto see and call its methods.</p>

<pre><code>[17] pry(main)&gt; class Dog
[17] pry(main)*   def bark
[17] pry(main)*     "woooooof"
[17] pry(main)*   end  
[17] pry(main)* end  
=&gt; :bark
[18] pry(main)&gt; doggie = Dog.new
=&gt; #&lt;Dog:0x007fddff9fadc8&gt;
[19] pry(main)&gt; show-source Dog

From: (pry) @ line 6:
Class name: Dog
Number of lines: 5

class Dog
  def bark
    "woooooof"
  end
end
[20] pry(main)&gt; cd doggie
[21] pry(#&lt;Dog&gt;):1&gt; bark
=&gt; "woooooof"
[22] pry(#&lt;Dog&gt;):1&gt; ls
Dog#methods: bark
self.methods: __pry__
locals: _  __  _dir_  _ex_  _file_  _in_  _out_  _pry_
</code></pre>

<h3>BASH manipulation</h3>

<p>Pry can also interact with BASH. Adding . before any BASH command while running pry will allow you to send those commands to BASH. You can switch directories, list content, even cowsay, all easily through Pry.</p>

<pre><code>[36] pry(#&lt;Dog&gt;):1&gt; .cd dev
[37] pry(#&lt;Dog&gt;):1&gt; .pwd
/Users/geo/dev
[38] pry(#&lt;Dog&gt;):1&gt; .cowsay take me home
 ______________ 
&lt; take me home &gt;
 -------------- 
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
[39] pry(#&lt;Dog&gt;):1&gt; .cd ~
[40] pry(#&lt;Dog&gt;):1&gt; .pwd
/Users/geo
[41] pry(#&lt;Dog&gt;):1&gt; 
</code></pre>

<h3>Tracing errors in code</h3>

<p>Sometimes errors can be a little hard to trace. Here&rsquo;s a convoluted example where the error trickles down through multiple methods.</p>

<pre><code>[10] pry(main)&gt; def gonna_make_error(name)
[10] pry(main)*   name.mistake
[10] pry(main)* end  
=&gt; :gonna_make_error
[11] pry(main)&gt; def second_layer_error(name)
[11] pry(main)*   gonna_make_error(name)
[11] pry(main)* end  
=&gt; :second_layer_error
[12] pry(main)&gt; def third_layer_errof(name)
[12] pry(main)*   second_layer_error(name)
[12] pry(main)* end  
=&gt; :third_layer_errof
[13] pry(main)&gt; third_layer_errof("greg")
NoMethodError: undefined method `mistake' for "greg":String
from (pry):10:in `gonna_make_error'
</code></pre>

<p>Pry provides two cool tools: wtf? and cat &ndash;ex, to help identify the cause of errors in your code.</p>

<p>wtf? allows you to display a few lines of backtrace for your most recent error.  Not too much different from receiving an error in ruby, but it proves developers have a sense of humor.</p>

<pre><code>[14] pry(main)&gt; wtf?
Exception: NoMethodError: undefined method `mistake' for "greg":String
--
0: (pry):10:in `gonna_make_error'
1: (pry):13:in `second_layer_error'
2: (pry):16:in `third_layer_errof'
3: (pry):18:in `__pry__'
4: /Users/geo/.rvm/gems/ruby-2.2.1/gems/pry-0.10.1/lib/pry/pry_instance.rb:355:in `eval'
5: /Users/geo/.rvm/gems/ruby-2.2.1/gems/pry-0.10.1/lib/pry/pry_instance.rb:355:in `evaluate_ruby'
6: /Users/geo/.rvm/gems/ruby-2.2.1/gems/pry-0.10.1/lib/pry/pry_instance.rb:323:in `handle_line'
7: /Users/geo/.rvm/gems/ruby-2.2.1/gems/pry-0.10.1/lib/pry/pry_instance.rb:243:in `block (2 levels) in eval'
8: /Users/geo/.rvm/gems/ruby-2.2.1/gems/pry-0.10.1/lib/pry/pry_instance.rb:242:in `catch'
9: /Users/geo/.rvm/gems/ruby-2.2.1/gems/pry-0.10.1/lib/pry/pry_instance.rb:242:in `block in eval'
</code></pre>

<p>cat &ndash;ex allows you to see the actual code that caused the error, which can be really helpful for debugging and learning how to code, especially when navigating errors in sinatra.</p>

<pre><code>[15] pry(main)&gt; cat --ex

Exception: NoMethodError: undefined method `mistake' for "greg":String
--
From: (pry) @ line 10 @ level: 0 of backtrace (of 32).

     5: def more_error(name)
     6:   error(name)
     7: end
     8: more_error("greg")
     9: def gonna_make_error(name)
 =&gt; 10:   name.mistake
    11: end
    12: def second_layer_error(name)
    13:   gonna_make_error(name)
    14: end
    15: def third_layer_errof(name)
[16] pry(main)&gt; 
</code></pre>

<p>Additionally, hist allows you to see a history of all the commands you&rsquo;ve typed into Pry, to get more information as to how your code has broken.</p>

<h3>Further Resources</h3>

<p>Pry provides a ton more functionality, so I really suggest spending a little time reading the below resources.</p>

<p><a href="http://pryrepl.org/">Pry Home Page</a><br/>
<a href="https://github.com/pry/pry">Pry on Git</a><br/>
<a href="https://github.com/pry/pry/wiki/Available-plugins">Pry Plugins</a><br/>
<a href="http://www.danvisintainer.com/?p=5">PryBaby</a></p>
]]></content>
  </entry>
  
</feed>
